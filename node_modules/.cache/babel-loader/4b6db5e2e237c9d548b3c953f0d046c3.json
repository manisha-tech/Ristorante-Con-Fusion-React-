{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport { DISHES } from '../shared/dishes';\nimport { baseUrl } from '../shared/baseUrl';\nexport const addComment = comment => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: comment // payload: {\n  //     dishId: dishId,\n  //     rating: rating,\n  //     author: author,\n  //     comment: comment\n  // }\n\n});\nexport const postComment = (dishId, rating, author, comment) => dispatch => {\n  const newComment = {\n    dishId: dishId,\n    rating: rating,\n    author: author,\n    comment: comment\n  };\n  newComment.date = new Date().toISOString();\n  return fetch(baseUrl + 'comments', {\n    method: 'POST',\n    body: JSON.stringify(newComment),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    credentials: \"same-origin\"\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(response => dispatch(addComment(response))).catch(error => {\n    console.log('Post comments', error.message);\n    alert('Your comment could not be posted\\nError: ' + error.message);\n  });\n}; // dispatching dishes:-\n\nexport const fetchDishes = () => dispatch => {\n  dispatch(dishesLoading(true));\n  return fetch(baseUrl + 'dishes').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(dishes => dispatch(addDishes(dishes))).catch(error => dispatch(dishesFailed(error.message)));\n};\nexport const dishesLoading = () => ({\n  type: ActionTypes.DISHES_LOADING\n});\nexport const dishesFailed = errmess => ({\n  type: ActionTypes.DISHES_FAILED,\n  payload: errmess\n});\nexport const addDishes = dishes => ({\n  type: ActionTypes.ADD_DISHES,\n  payload: dishes\n}); //dispatching comments:-\n\nexport const fetchComments = () => dispatch => {\n  return fetch(baseUrl + 'comments').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(comments => dispatch(addComments(comments))).catch(error => dispatch(commentsFailed(error.message)));\n};\nexport const commentsFailed = errmess => ({\n  type: ActionTypes.COMMENTS_FAILED,\n  payload: errmess\n});\nexport const addComments = comments => ({\n  type: ActionTypes.ADD_COMMENTS,\n  payload: comments\n});\nexport const fetchPromos = () => dispatch => {\n  dispatch(promosLoading());\n  return fetch(baseUrl + 'promotions').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      var error = new Error('Error ' + response.status + ': ' + response.statusText);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    var errmess = new Error(error.message);\n    throw errmess;\n  }).then(response => response.json()).then(promos => dispatch(addPromos(promos))).catch(error => dispatch(promosFailed(error.message)));\n};\nexport const promosLoading = () => ({\n  type: ActionTypes.PROMOS_LOADING\n});\nexport const promosFailed = errmess => ({\n  type: ActionTypes.PROMOS_FAILED,\n  payload: errmess\n});\nexport const addPromos = promos => ({\n  type: ActionTypes.ADD_PROMOS,\n  payload: promos\n});","map":{"version":3,"sources":["/Users/manishachoudhary/Desktop/confusion/src/redux/ActionCreators.js"],"names":["ActionTypes","DISHES","baseUrl","addComment","comment","type","ADD_COMMENT","payload","postComment","dishId","rating","author","dispatch","newComment","date","Date","toISOString","fetch","method","body","JSON","stringify","headers","credentials","then","response","ok","error","Error","status","statusText","errmess","message","json","catch","console","log","alert","fetchDishes","dishesLoading","dishes","addDishes","dishesFailed","DISHES_LOADING","DISHES_FAILED","ADD_DISHES","fetchComments","comments","addComments","commentsFailed","COMMENTS_FAILED","ADD_COMMENTS","fetchPromos","promosLoading","promos","addPromos","promosFailed","PROMOS_LOADING","PROMOS_FAILED","ADD_PROMOS"],"mappings":"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","sourcesContent":["import * as ActionTypes from './ActionTypes';\nimport {DISHES} from '../shared/dishes';\nimport { baseUrl } from '../shared/baseUrl';\n\n\nexport const addComment = (comment) => ({\n    type: ActionTypes.ADD_COMMENT,\n    payload: comment\n    // payload: {\n    //     dishId: dishId,\n    //     rating: rating,\n    //     author: author,\n    //     comment: comment\n    // }\n});\n\nexport const postComment = (dishId, rating, author, comment) => (dispatch)=>{\n         const newComment = {\n                dishId: dishId,\n                rating: rating,\n                author: author,\n                comment: comment\n         }\n         newComment.date = new Date().toISOString();\n\n         return fetch(baseUrl + 'comments', {\n            method: 'POST',\n            body: JSON.stringify(newComment),\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            credentials: \"same-origin\"\n        })\n        .then(response => {\n            if (response.ok) {\n              return response;\n            } else {\n              var error = new Error('Error ' + response.status + ': ' + response.statusText);\n              error.response = response;\n              throw error;\n            }\n          },\n          error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n          })\n\n        .then(response => response.json())\n        .then(response => dispatch(addComment(response)))\n        .catch(error =>  { console.log('Post comments', error.message);\n         alert('Your comment could not be posted\\nError: '+error.message); });\n    };\n     \n\n\n // dispatching dishes:-\n\n\nexport const fetchDishes = () => (dispatch) => {\n        dispatch(dishesLoading(true));\n\n        return fetch(baseUrl + 'dishes')\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n      })\n    .then(response => response.json())\n    .then(dishes => dispatch(addDishes(dishes)))\n    .catch(error => dispatch(dishesFailed(error.message)));\n}\n\nexport const dishesLoading = () => ({\n    type: ActionTypes.DISHES_LOADING\n});\n\n\n\n\nexport const dishesFailed = (errmess) => ({\n    type : ActionTypes.DISHES_FAILED,\n    payload : errmess\n});\n\n\n\nexport const addDishes = (dishes) =>({\n    type: ActionTypes.ADD_DISHES,\n    payload: dishes\n});\n\n\n\n//dispatching comments:-\nexport const fetchComments = () => (dispatch) => {    \n    return fetch(baseUrl + 'comments')\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n      })\n    .then(response => response.json())\n    .then(comments => dispatch(addComments(comments)))\n    .catch(error => dispatch(commentsFailed(error.message)));\n\n};\n\nexport const commentsFailed = (errmess) => ({\n    type: ActionTypes.COMMENTS_FAILED,\n    payload: errmess\n});\n\nexport const addComments = (comments) => ({\n    type: ActionTypes.ADD_COMMENTS,\n    payload: comments\n});\n\nexport const fetchPromos = () => (dispatch) => {\n    \n    dispatch(promosLoading());\n\n    return fetch(baseUrl + 'promotions')\n    .then(response => {\n        if (response.ok) {\n          return response;\n        } else {\n          var error = new Error('Error ' + response.status + ': ' + response.statusText);\n          error.response = response;\n          throw error;\n        }\n      },\n      error => {\n            var errmess = new Error(error.message);\n            throw errmess;\n      })\n    .then(response => response.json())\n    .then(promos => dispatch(addPromos(promos)))\n    .catch(error => dispatch(promosFailed(error.message)));\n}\n\nexport const promosLoading = () => ({\n    type: ActionTypes.PROMOS_LOADING\n});\n\nexport const promosFailed = (errmess) => ({\n    type: ActionTypes.PROMOS_FAILED,\n    payload: errmess\n});\n\nexport const addPromos = (promos) => ({\n    type: ActionTypes.ADD_PROMOS,\n    payload: promos\n});"]},"metadata":{},"sourceType":"module"}